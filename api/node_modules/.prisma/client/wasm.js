
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  handle: 'handle',
  name: 'name',
  createdAt: 'createdAt',
  googleEmail: 'googleEmail',
  googleRefreshToken: 'googleRefreshToken'
};

exports.Prisma.IdentityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerId: 'providerId'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.OrgMembershipScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  info: 'info'
};

exports.Prisma.TeamLinkScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  label: 'label',
  url: 'url',
  ordinal: 'ordinal'
};

exports.Prisma.TeamMembershipScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.TeamJoinCodeScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  code: 'code',
  expiresAt: 'expiresAt',
  maxUses: 'maxUses',
  uses: 'uses'
};

exports.Prisma.OrgJoinCodeScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  code: 'code',
  expiresAt: 'expiresAt',
  maxUses: 'maxUses',
  uses: 'uses',
  createdAt: 'createdAt'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  status: 'status'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  goalId: 'goalId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.TaskAssignmentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId'
};

exports.Prisma.TaskNoteScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.TaskNoteMentionScalarFieldEnum = {
  id: 'id',
  noteId: 'noteId',
  userId: 'userId'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  title: 'title',
  description: 'description',
  type: 'type',
  startAt: 'startAt',
  endAt: 'endAt',
  googleEventId: 'googleEventId',
  googleCalendarId: 'googleCalendarId',
  syncedAt: 'syncedAt',
  location: 'location',
  createdAt: 'createdAt',
  relatedTaskId: 'relatedTaskId'
};

exports.Prisma.TaskStatusLogScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  teamId: 'teamId',
  changedBy: 'changedBy',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus',
  changedAt: 'changedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OrgRole = exports.$Enums.OrgRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.TeamRole = exports.$Enums.TeamRole = {
  LEADER: 'LEADER',
  MEMBER: 'MEMBER'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  BLOCKED: 'BLOCKED',
  DONE: 'DONE'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.CalendarItemType = exports.$Enums.CalendarItemType = {
  TASK: 'TASK',
  EVENT: 'EVENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Identity: 'Identity',
  Organization: 'Organization',
  OrgMembership: 'OrgMembership',
  Team: 'Team',
  TeamLink: 'TeamLink',
  TeamMembership: 'TeamMembership',
  TeamJoinCode: 'TeamJoinCode',
  OrgJoinCode: 'OrgJoinCode',
  Goal: 'Goal',
  Task: 'Task',
  TaskAssignment: 'TaskAssignment',
  TaskNote: 'TaskNote',
  TaskNoteMention: 'TaskNoteMention',
  CalendarEvent: 'CalendarEvent',
  TaskStatusLog: 'TaskStatusLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
