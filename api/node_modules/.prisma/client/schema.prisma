generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrgRole {
  ADMIN
  MEMBER
}

enum TeamRole {
  LEADER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id                 String            @id @default(cuid())
  email              String?           @unique
  handle             String            @unique
  name               String?
  identities         Identity[]
  memberships        OrgMembership[]
  teamMemberships    TeamMembership[]
  notes              TaskNote[]
  createdAt          DateTime          @default(now())
  TaskAssignment     TaskAssignment[]
  TaskNoteMention    TaskNoteMention[]
  googleEmail        String? // NEW (who weâ€™re syncing to)
  googleRefreshToken String?
  statusLogs         TaskStatusLog[]   @relation("UserStatusLogs")
}

model Identity {
  id         String @id @default(cuid())
  userId     String
  provider   String
  providerId String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model Organization {
  id           String          @id @default(cuid())
  name         String
  createdBy    String
  memberships  OrgMembership[]
  teams        Team[]
  orgJoinCodes OrgJoinCode[]
  createdAt    DateTime        @default(now())
}

model OrgMembership {
  id     String       @id @default(cuid())
  orgId  String
  userId String
  role   OrgRole
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
}

model Team {
  id          String           @id @default(cuid())
  orgId       String
  name        String
  createdBy   String
  org         Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  memberships TeamMembership[]
  goals       Goal[]
  tasks       Task[]
  events      CalendarEvent[]
  joinCodes   TeamJoinCode[]
  createdAt   DateTime         @default(now())
  info        String?
  links       TeamLink[]
  statusLogs  TaskStatusLog[]  @relation("TeamStatusLogs")
}

model TeamLink {
  id      String @id @default(cuid())
  teamId  String
  label   String
  url     String
  ordinal Int    @default(0)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId, ordinal])
}

model TeamMembership {
  id     String   @id @default(cuid())
  teamId String
  userId String
  role   TeamRole @default(MEMBER)
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamJoinCode {
  id        String    @id @default(cuid())
  teamId    String
  code      String    @unique
  expiresAt DateTime?
  maxUses   Int?
  uses      Int       @default(0)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model OrgJoinCode {
  id        String    @id @default(cuid())
  orgId     String
  code      String    @unique
  expiresAt DateTime?
  maxUses   Int?
  uses      Int       @default(0)
  createdAt DateTime  @default(now())

  org Organization @relation(fields: [orgId], references: [id])
}

model Goal {
  id          String    @id @default(cuid())
  teamId      String
  title       String
  description String?
  dueDate     DateTime?
  status      String    @default("PLANNED")
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id             String           @id @default(cuid())
  teamId         String
  goalId         String?
  title          String
  description    String?
  status         TaskStatus       @default(TODO)
  priority       Priority         @default(MEDIUM)
  dueDate        DateTime?
  createdBy      String
  team           Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  goal           Goal?            @relation(fields: [goalId], references: [id], onDelete: Cascade)
  assignees      TaskAssignment[]
  notes          TaskNote[]
  createdAt      DateTime         @default(now())
  calendarEvents CalendarEvent[]
  statusLogs     TaskStatusLog[]  @relation("TaskStatusLogs")
}

model TaskAssignment {
  id     String @id @default(cuid())
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model TaskNote {
  id        String            @id @default(cuid())
  taskId    String
  authorId  String
  content   String
  createdAt DateTime          @default(now())
  task      Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  mentions  TaskNoteMention[]
}

model TaskNoteMention {
  id     String   @id @default(cuid())
  noteId String
  userId String
  note   TaskNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
}

enum CalendarItemType {
  TASK
  EVENT
}

model CalendarEvent {
  id               String           @id @default(cuid())
  teamId           String
  title            String
  description      String?
  type             CalendarItemType @default(EVENT)
  startAt          DateTime
  endAt            DateTime
  googleEventId    String?          @unique
  googleCalendarId String?
  syncedAt         DateTime?
  location         String?
  createdAt        DateTime         @default(now())
  relatedTaskId    String?
  team             Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  task             Task?            @relation(fields: [relatedTaskId], references: [id], onDelete: Cascade)
}

model TaskStatusLog {
  id        String   @id @default(cuid())
  taskId    String
  teamId    String
  changedBy String
  oldStatus String?
  newStatus String
  changedAt DateTime @default(now())

  task  Task @relation("TaskStatusLogs", fields: [taskId], references: [id], onDelete: Cascade)
  team  Team @relation("TeamStatusLogs", fields: [teamId], references: [id], onDelete: Cascade)
  actor User @relation("UserStatusLogs", fields: [changedBy], references: [id], onDelete: Cascade)

  @@index([teamId, changedAt, id])
}
